{"ast":null,"code":"import { STATES } from 'mongoose';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACTS:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case UPDATE_CONTACTS:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACTS:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Ronan/desktop/Contacts/client/src/context/contact/contactReducer.js"],"names":["STATES","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","state","action","type","contacts","payload","loading","ADD_CONTACTS","UPDATE_CONTACTS","map","contact","_id","DELETE_CONTACTS","filter","filtered","error","current","regex","RegExp","name","match","email"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,YAAT,EACAC,WADA,EAEAC,cAFA,EAGAC,WAHA,EAIAC,aAJA,EAKAC,cALA,EAMAC,eANA,EAOAC,cAPA,EAQAC,YARA,EASAC,aATA,QASoB,UATpB;AAWA,gBAAc,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC1B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKZ,YAAL;AAAmB,aAAM,EAAC,GAAGU,KAAJ;AAAUG,QAAAA,QAAQ,EAACF,MAAM,CAACG,OAA1B;AACzBC,QAAAA,OAAO,EAAC;AADiB,OAAN;;AAEnB,SAAKC,YAAL;AAAmB,aAAM,EAAC,GAAGN,KAAJ;AAAUG,QAAAA,QAAQ,EAAC,CAACF,MAAM,CAACG,OAAR,EACxC,GAAGJ,KAAK,CAACG,QAD+B,CAAnB;AACFE,QAAAA,OAAO,EAAC;AADN,OAAN;;AAEf,SAAKE,eAAL;AAAsB,aAAM,EAAC,GAAGP,KAAJ;AAAUG,QAAAA,QAAQ,EAACH,KAAK,CAACG,QAAN,CAAeK,GAAf,CAC3CC,OAAO,IAAEA,OAAO,CAACC,GAAR,KAAeT,MAAM,CAACG,OAAP,CAAeM,GAA9B,GAAkCT,MAAM,CAACG,OAAzC,GAAiDK,OADf,CAAnB;AAE1BJ,QAAAA,OAAO,EAAC;AAFkB,OAAN;;AAGtB,SAAKM,eAAL;AAAsB,aAAM,EAAC,GAAGX,KAAJ;AAAUG,QAAAA,QAAQ,EAACH,KAAK,CAACG,QAAN,CAAeS,MAAf,CAC3CH,OAAO,IAAEA,OAAO,CAACC,GAAR,KAAcT,MAAM,CAACG,OADa,CAAnB;AACeC,QAAAA,OAAO,EAAC;AADvB,OAAN;;AAEtB,SAAKR,cAAL;AAAqB,aAAM,EAAC,GAAGG,KAAJ;AAAUG,QAAAA,QAAQ,EAAC,IAAnB;AAAwBU,QAAAA,QAAQ,EAAC,IAAjC;AAAsCC,QAAAA,KAAK,EAAC,IAA5C;AAAiDC,QAAAA,OAAO,EAAC;AAAzD,OAAN;;AACrB,SAAKtB,WAAL;AAAkB,aAAM,EAAC,GAAGO,KAAJ;AAAUe,QAAAA,OAAO,EAACd,MAAM,CAACG;AAAzB,OAAN;;AAClB,SAAKV,aAAL;AAAoB,aAAM,EAAC,GAAGM,KAAJ;AAAUe,QAAAA,OAAO,EAAC;AAAlB,OAAN;;AACpB,SAAKnB,eAAL;AAAsB,aAAM,EAAC,GAAGI,KAAJ;AACCa,QAAAA,QAAQ,EAAEb,KAAK,CAACG,QAAN,CAAeS,MAAf,CAAsBH,OAAO,IAAE;AACrC,gBAAMO,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEhB,MAAM,CAACG,OAAQ,EAA7B,EAA+B,IAA/B,CAAd;AACA,iBAAOK,OAAO,CAACS,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA2BP,OAAO,CAACW,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAAlC;AACH,SAHS;AADX,OAAN;;AAKtB,SAAKlB,YAAL;AAAmB,aAAM,EAAE,GAAGE,KAAL;AAAWa,QAAAA,QAAQ,EAAC;AAApB,OAAN;;AACnB,SAAKd,aAAL;AAAoB,aAAM,EAAC,GAAGC,KAAJ;AAAUc,QAAAA,KAAK,EAACb,MAAM,CAACG;AAAvB,OAAN;;AAEpB;AAAS,aAAOJ,KAAP;AArBjB;AAuBH,CAxBD","sourcesContent":["import { STATES } from 'mongoose'\r\nimport  {GET_CONTACTS,\r\nADD_CONTACT,\r\nDELETE_CONTACT,\r\nSET_CURRENT,\r\nCLEAR_CURRENT,\r\nUPDATE_CONTACT,\r\nFILTER_CONTACTS,\r\nCLEAR_CONTACTS,\r\nCLEAR_FILTER,\r\nCONTACT_ERROR} from '../types'\r\n\r\nexport default(state,action)=>{\r\n    switch(action.type){\r\n        case GET_CONTACTS: return{...state,contacts:action.payload,\r\n        loading:false}\r\n        case ADD_CONTACTS: return{...state,contacts:[action.payload,\r\n            ...state.contacts],loading:false}\r\n            case UPDATE_CONTACTS: return{...state,contacts:state.contacts.map(\r\n                contact=>contact._id ===action.payload._id?action.payload:contact\r\n            ),loading:false}\r\n            case DELETE_CONTACTS: return{...state,contacts:state.contacts.filter(\r\n                contact=>contact._id!==action.payload),loading:false}\r\n            case CLEAR_CONTACTS: return{...state,contacts:null,filtered:null,error:null,current:null}\r\n            case SET_CURRENT: return{...state,current:action.payload}\r\n            case CLEAR_CURRENT: return{...state,current:null}\r\n            case FILTER_CONTACTS: return{...state,\r\n                                         filtered: state.contacts.filter(contact=>{\r\n                                             const regex = new RegExp(`${action.payload}`,'gi')\r\n                                             return contact.name.match(regex)||contact.email.match(regex)\r\n                                         })}\r\n            case CLEAR_FILTER: return{ ...state,filtered:null}\r\n            case CONTACT_ERROR: return{...state,error:action.payload}\r\n\r\n            default: return state\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}